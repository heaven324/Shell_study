# base command

date                                                        # 날짜와 시간 출력

who                                                         # 로그인된 사용자 확인
who am i                                                    # 나의 정보

echo                                                        # 문자 출력
echo this is a test
echo 
echo 1          2      3          4                         # 공백 없어짐

ls                                                          # 파일 출력

cat                                                         # 파일 내용 출력

wc                                                          # 파일의 단어 수 계산(라인 수, 단어 수, 문자 수)
wc -l test                                                  # 라인 수 계산
wc -c test                                                  # 문자 수 계산
wc -w test                                                  # 단어 수 계산

cp                                                          # 파일 복사

mv                                                          # 파일 이름 변경

rm                                                          # 파일 삭제

pwd                                                         # 작업 디렉토리 출력

cd                                                          # 디렉토리 이동

mkdir                                                       # 디렉토리 생성

ln                                                          # 파일 링크
ln from to

rmdir                                                       # 디렉토리 삭제



# 정규표현식 문자

------------------------------------------------------------------------------------------------------------------------
[표기]         [의미]                       [예시]          [일치하는 내용]

.              모든문자                     a..             a 다음에 오는 모든 두 문자

^              라인의 시작                  ^wood           라인에서 시작된 wood

$              라인의 끝                    x$              라인의 마지막 문자가 x
                                            ^INSERT$        INSERT 문자를 포함한 문자
                                            ^$              문자를 전혀 포함하지 않는 라인

*              직전의 정규표현식이 0개      x*              0개 이상의 연속 x
               이상 나타나는 문자열         xx*             한 개 이상의 연속 x
                                            .*              0개 이상의 문자
                                            w.*s            w다음에 0개 이상의 문자가 오고 그 다음에 s가 온다.

+              직전의 정규표현식이 한개     x+              한 개 이상의 연속 x
               이상 나타나는 문자열         xx+             두 개 이상의 연속 x
                                            .+              한 개 이상의 문자
                                            w.+s            w 다음에 한 개 이상의 문자가 오고 그 다음에 s가 온다.

[chars]        chars안의 모든 문자          [tT]            소문자 t 또는 대문자 T
                                            [a-z]           소문자
                                            [a-zA-Z]        소문자 또는 대문자

[^chars]       chars가 아닌 모든 문자       [^0-9]          숫자가 아닌 문자
                                            [^a-zA-Z]       알파벳이 아닌 문자

\{min,max\}    직전의 정규 표현식이 최소    x\{1,5\}        x가 최소 한 개, 최대 다섯 개
               min, 최대 max개로 발생       [0-9]\{3,9\}    연속적으로 세 개에서 아홉 개인 숫자
                                            [0-9]\{3\}      정확하게 세 개인 숫자
                                            [0-9]\{3,\}     최소 세 개의 숫자

\(...\)                                     ^\(.\)          라인의 첫 번째 글자며, 해당 글자를 레지스터 1에 저장한다.
                                            ^\(.\)\1        라인의 첫 번째 글자와 두 번째 글자가 동일하면 라인의 
                                                            첫 번째와 두 번째글자
                                            ^\(.\)\(.\)     라인의 첫 번째와 두 번째 글자며 레지스터 1에 첫 번째 글자를, 
                                                            레지스터 2에 두 번째 글자를 저장한다.
------------------------------------------------------------------------------------------------------------------------

cut -cchar file                                             # 데이터 필드 추출
who | cut -c1-8
who | cut -c1-8 | sort
who | cut -c10-16
who | cut -c1-8,18-
cut -d: -f1 /etc/passwd                                     # :구분자, field 1 추출
cut -d: -f1,6 /etc/passwd
cut -f1 phonebook                                           # field 1 추출, 기본 구분자 탭
sed -n l phonebook                                          # 구분자 확인 방법

paste file                                                  # 두 파일의 라인 병합
paste names numbers
paste -d'+' names addresses numbers                         # + 로 구분
paste -s names                                              # 모든 라인 이어붙이기


sed command file                                            # 스트림 편집기
sed 's/Unix/UNIX/' intro                                    # 한 라인의 1개 수정
sed 's/Unix/UNIX/' intro > tmp
mv tmp intro
sed 's/Unix/UNIX/g' intro                                   # g 전역 옵션, 한 라인의 전부 수정
sed -n '/Unix/p' intro                                      # 특정 라인 출력
sed -n '1,2p' intro
sed '1,2d' intro                                            # 라인 삭제
sed '/Unix/d' intro
sed '5d'                                                    # 다섯번째 라인 삭제
sed '/[Tt]est/d'                                            # Test 또는 test를 포함한 라인 삭제
sed -n '20,25p' text                                        # text파일에서 20번째 라인부터 25번째 라인까지 출력
sed '1,10s/unix/UNIX/g' intro                               # intro 파일의 처음부터 10라인에서 unix를 발견하면 UNIX로 변경
sed '/jan/s/-1/-5/'                                         # jan을 포함한 모든 라인에서 처음 -1을 -5로 변경
sed 's/^...//' data                                         # data 파일의 각 라인에서 처음 세 개의 문자를 삭제
sed 's/...$//' data                                         # data 파일의 각 라인에서 마지막 새 개의 문자를 삭제
sed -n 'l' text                                             # \nn(nn은 문자의 8진수 값)과 \t(탭) 같은 출력되지 않는 
                                                              문자와 함께 text의 모든 라인을 출력

tr from-chars to-chars                                      # 표준 입력에서 문자 변환
tr e x < intro
cut -d: -f1,6 /etc/passwd | tr : "\t"
date | tr " " "12"
--------일부 ASCII문자의 8진수 값--------
벨(bell)                        7
백스페이스(backspace)           10
텝(tab)                         11
개행(newline)                   12
라인피드(linefeed)              13
폼피드(formfeed)                14
캐리지 리턴(carriage return)    15
이스케이프(escape)              33
-----------------------------------------
tr '[a-z]' '[A-Z]' < intro
tr '[a-zA-z]' '[A-Za-z]' < intro                            # 대문자는 소문자로 소문자는 대문자로
tr -s " " " " < lotsaspace                                  # to-chars 에서 연속인 문자 압축
tr -d ' ' < intro                                           # 개별 문자 삭제
sed 's/ //g' intro                                          # 위와 같은 결과


grep pattern files                                          # 지정 패턴 검색
grep Unix intro
sed -n '/Unix/p' intro                                      # 위와 같은 결과
grep [tT]he intro
grep -i the intro                                           # 위와 같은 결과
grep -v 'Unix' intro                                        # 일치하지 않는 문자 찾기 옵션
grep -l 'Move_history' *.c                                  # 지정된 패턴을 포함하는 파일 목록 출력
grep -n 'Move_history' testch.c                             # 일치하면 맨 앞에 라인 번호 표시


sort                                                        # 기본 라인별 오름차순 정렬
sort -u names                                               # 중복라인 제거
sort -r names                                               # 내림차순 정렬
sort names > sorted_names
sort names -o sorted_names                                  # 위와 같은 결과
sort names -o names                                         # 같은 파일 변경으로도 사용 가능
sort -n data                                                # 첫 글자를 숫자로 간주하고 정렬
sort -k2n data                                              # 두번째 필드의 첫글자를 숫자로 간주하고 이 기준으로 정렬
sort -k3n -t: /etc/passwd                                   # 구분자 : 기준으로 세번쩨 필드 중심으로 정렬 


uniq in_file out_file                                       # 연속라인 중복 제거 출력
sort names | uniq -d                                        # 중복 라인을 출력
sort /etc/passwd | cut -f1 -d: | uniq -d
sort names | uniq -c                                        # 라인의 중복 개수 계산


















